x = int(input())

# 각 부분의 연산횟수 최적해를 담을 딕셔너리 초기화, 문제의 정수 범위가 30000이하이다.
d = [0] * 30001


""" 보텀업방식의 문제풀이 
    작은 문제부터 큰 문제로 올라가면서 답을 도출하는 방식이다.
    1빼기, 2나누기, 3나누기, 5나누기 연산을 했을 때의 값을 키로 선정하여 딕셔너리에 저장된 값(각 부분의 최소연산횟수)을 꺼내와 +1을 한다.
    그 중 가장 작은 값이 그 부분의 최적해이다.
"""
for i in range(2, x+1):
    # 1빼기 연산
    # 지난 최적해에서 +1을 해주면 1빼기 연산의 연산횟수가 된다.
    d[i] = d[i-1] + 1

    # 2나누기 연산
    # 2나누기 연산을 했을 때 나오는 값의 연산횟수 최적해에 +1를 해주면 2나누기 연산의 연산횟수가 된다.
    if i % 2 == 0:
        d[i] = min(d[i//2] + 1, d[i])

    # 3나누기 연산
    # 3나누기 연산을 했을 때 나오는 값의 연산횟수 최적해에 +1를 해주면 3나누기 연산의 연산횟수가 된다.
    if i % 3 == 0:
        d[i] = min(d[i//3] + 1, d[i])
    
    # 5나누기 연산
    # 5나누기 연산을 했을 때 나오는 값의 연산횟수 최적해에 +1를 해주면 5나누기 연산의 연산횟수가 된다.
    if i % 5 == 0:
        d[i] = min(d[i//5] + 1, d[i])

print(d[x])